module TwoD_Quad_Order2


function evaluate(ξ::Float64,η::Float64)
    phi=zeros(9,1)
    dphi_dξ=zeros(9,1)
    dphi_dη=zeros(9,1)





phi[1]=ξ*(ξ-1)/2*η*(η-1)/2
phi[2]=(ξ+1)*ξ/2*η*(η-1)/2
phi[3]=(ξ+1)*ξ/2*(η+1)*η/2
phi[4]=ξ*(ξ-1)/2*(η+1)*η/2
phi[5]=-(ξ+1)*(ξ-1)*η*(η-1)/2
phi[6]=(ξ+1)*ξ/2*-(η+1)*(η-1)
phi[7]=-(ξ+1)*(ξ-1)*(η+1)*η/2
phi[8]=ξ*(ξ-1)/2*-(η+1)*(η-1)
phi[9]=-(ξ+1)*(ξ-1)*-(η+1)*(η-1)

dphi_dξ[1]=η*ξ*(η-1)/4+η*(η-1)*(ξ-1)/4
dphi_dξ[2]=η*ξ*(η-1)/4+η*(η-1)*(ξ+1)/4
dphi_dξ[3]=η*ξ*(η+1)/4+η*(η+1)*(ξ+1)/4
dphi_dξ[4]=η*ξ*(η+1)/4+η*(η+1)*(ξ-1)/4
dphi_dξ[5]=η*(η-1)*(-ξ-1)/2-η*(η-1)*(ξ-1)/2
dphi_dξ[6]=ξ*(-η-1)*(η-1)/2+(-η-1)*(η-1)*(ξ+1)/2
dphi_dξ[7]=η*(η+1)*(-ξ-1)/2-η*(η+1)*(ξ-1)/2
dphi_dξ[8]=ξ*(-η-1)*(η-1)/2+(-η-1)*(η-1)*(ξ-1)/2
dphi_dξ[9]=(-η-1)*(η-1)*(-ξ-1)-(-η-1)*(η-1)*(ξ-1)






dphi_dη[1]=η*ξ*(ξ-1)/4+ξ*(η-1)*(ξ-1)/4
dphi_dη[2]=η*ξ*(ξ+1)/4+ξ*(η-1)*(ξ+1)/4
dphi_dη[3]=η*ξ*(ξ+1)/4+ξ*(η+1)*(ξ+1)/4
dphi_dη[4]=η*ξ*(ξ-1)/4+ξ*(η+1)*(ξ-1)/4
dphi_dη[5]=η*(-ξ-1)*(ξ-1)/2+(η-1)*(-ξ-1)*(ξ-1)/2
dphi_dη[6]=ξ*(-η-1)*(ξ+1)/2-ξ*(η-1)*(ξ+1)/2
dphi_dη[7]=η*(-ξ-1)*(ξ-1)/2+(η+1)*(-ξ-1)*(ξ-1)/2
dphi_dη[8]=ξ*(-η-1)*(ξ-1)/2-ξ*(η-1)*(ξ-1)/2
dphi_dη[9]=(-η-1)*(-ξ-1)*(ξ-1)-(η-1)*(-ξ-1)*(ξ-1)

return phi,dphi_dξ,dphi_dη

end











end
